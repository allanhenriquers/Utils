<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@2.21">
      <jobPropertyDescriptors>
        <string>org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty</string>
        <string>hudson.model.ParametersDefinitionProperty</string>
        <string>org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.10"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>10</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>7</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>versaoAtual</name>
          <description>Versão atual (opcional). Exemplo: 1.0.0-BUILD01</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>proximaVersao</name>
          <description>Próxima versão (opcional). Exemplo: 1.0.0-BUILD02</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>Branch de onde será gerada a release</description>
          <defaultValue>c6-v7.11.08</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>def repository = &apos;ssh://git@stash.matera.com:7999/cbank/emprestimo.git&apos;
def slackChannel = &apos;#openbanking-jenkins&apos;

properties(
    [
        disableConcurrentBuilds(),
        parameters(
            [
                string(defaultValue: &apos;&apos;, description: &apos;Versão atual (opcional). Exemplo: 1.0.0-BUILD01&apos;, name: &apos;versaoAtual&apos;),
                string(defaultValue: &apos;&apos;, description: &apos;Próxima versão (opcional). Exemplo: 1.0.0-BUILD02&apos;, name: &apos;proximaVersao&apos;),
                string(defaultValue: &apos;c6-v7.11.08&apos;, description: &apos;Branch de onde será gerada a release&apos;, name: &apos;branch&apos;)
            ]
        ),
        pipelineTriggers([])
    ]
)

node(&apos;jdk8-maven-slim&apos;) {
    if (params.branch == &apos;&apos;) {
        error &quot;Branch não informado&quot;
    }
    
    try {
        stage(&apos;Checkout&apos;) {
            git branch: &quot;${params.branch}&quot;, credentialsId: &apos;2a64b1d3-8c92-4ee8-8db0-b766ec6f9c84&apos;, url: repository
        }

        stage(&apos;Prepare&apos;) {

            def pom = readMavenPom()

            def currentVersion = params.versaoAtual.trim()
            
            if (currentVersion.contains(&apos;carbon&apos;)){
                msg = &quot;Este build não é adequado para projetos que já mudaram o modelo de versionamento...&quot;
                println msg
                error msg
            }
            
            def nextVersion = params.proximaVersao.trim()

            if (currentVersion == &apos;&apos;) {
                currentVersion = pom.version.minus(&apos;-SNAPSHOT&apos;)
            }

            if (nextVersion == &apos;&apos;) {
                splitted = currentVersion.tokenize(&apos;-.&apos;)
                last_string = splitted.last()
                last_string = last_string.minus(&apos;build&apos;)
                last = last_string as Integer
                start = currentVersion.getAt(0..-(last_string.length() + 1))
                if (last &lt; 9) {
                    start += &apos;0&apos;
                }
                nextVersion = start + (last + 1)
            }

            env.MAIN_BRANCH = &quot;${params.branch}&quot;
            env.CURRENT_VERSION = &quot;${currentVersion}&quot;
            env.NEXT_VERSION = &quot;${nextVersion}-SNAPSHOT&quot;
            env.TAG = &quot;${currentVersion}&quot;

            wrap([$class: &apos;BuildUser&apos;]) {

                env.BUILD_USER = &quot;${BUILD_USER}&quot;
                env.BUILD_EMAIL = &quot;${BUILD_USER_EMAIL}&quot;

                sh &apos;git config --global user.email &quot;${BUILD_USER_EMAIL}&quot;&apos;
                sh &apos;git config --global user.name &quot;${BUILD_USER}&quot;&apos;

            }

        }

        stage(&apos;Tag&apos;) {

            sshagent([&apos;2a64b1d3-8c92-4ee8-8db0-b766ec6f9c84&apos;]) {

                // Branch
                sh &apos;git checkout ${MAIN_BRANCH}&apos;
                sh &apos;git pull origin ${MAIN_BRANCH}&apos;

                // Versão do Release
                sh &apos;git checkout -b release/${TAG}&apos;
                updateVersionWithMaven(env.CURRENT_VERSION)

                sh &apos;git commit -a -m &quot;Releasing ${TAG} from ${MAIN_BRANCH} by ${BUILD_USER} through Jenkins (${BUILD_URL})&quot;&apos;

                sh &apos;git tag $TAG&apos;
                sh &apos;git push origin $TAG&apos;

            }

        }

        stage(&apos;Build Package&apos;) {
            updateClientVersion()

            withMaven(
                    mavenSettingsConfig: &apos;3fa78956-16be-4f78-8c04-b8b7410811c4&apos;,
                    mavenLocalRepo: &apos;.repository&apos;,
                    options: [
                            artifactsPublisher(disabled: false),
                            findbugsPublisher(disabled: true),
                            openTasksPublisher(disabled: true)
                    ]
            ) {
                withCredentials(
                    [file(credentialsId: &apos;MATERA_KEYSTORE&apos;, variable: &apos;KEYSTORE&apos;)]) {
                    env.MATERA_KEYSTORE = &quot;${KEYSTORE}&quot;
                sh &apos;mvn clean install -Pservices&apos;
                }
            }
            archive &quot;**/target/*.war&quot;
            sh &apos;git reset --hard&apos;
        }

        stage(&apos;Deploy api-client&apos;) {

            withMaven(
                    mavenSettingsConfig: &apos;3fa78956-16be-4f78-8c04-b8b7410811c4&apos;,
                    mavenLocalRepo: &apos;.repository&apos;,
                    options: [
                            artifactsPublisher(disabled: true),
                            findbugsPublisher(disabled: true),
                            openTasksPublisher(disabled: true)
                    ]
            ) {
                sh &apos;mvn clean deploy -DskipTests -f api-client/pom.xml&apos;
            }
            sh &apos;git reset --hard&apos;
        }

        stage(&apos;Build Database&apos;) {
            def currentVersion = &quot;${env.CURRENT_VERSION}&quot;
            def versionDb = currentVersion.substring(0, currentVersion.indexOf(&apos;.00-c6&apos;))
            echo &apos;Current version = &apos; + versionDb
            configFileProvider([configFile(fileId: &apos;gradle-mirror&apos;, targetLocation: &apos;/home/jenkins/.gradle/init.gradle&apos;)]) {
                sh &quot;./gradlew clean buildBackend -Pend=HEAD -Pversion=${versionDb} --refresh-dependencies --stacktrace -Dwrap.local=true&quot;
            }
            archive &quot;**/*.zip&quot;

        }
        
        stage(&apos;Next Version&apos;) {

            sshagent([&apos;2a64b1d3-8c92-4ee8-8db0-b766ec6f9c84&apos;]) {

                // Merge no branch
                sh &apos;git checkout ${MAIN_BRANCH}&apos;
                sh &apos;git merge --no-ff -X theirs -m &quot;Merging release/${TAG} into ${MAIN_BRANCH} using theirs strategy&quot; release/${TAG}&apos;

                // Próxima versão
                updateVersionWithMaven(env.NEXT_VERSION)
                sh &apos;git commit -a -m &quot;Updating to next version: ${NEXT_VERSION}&quot;&apos;
                sh &apos;git push origin ${MAIN_BRANCH}&apos;

            }

            currentBuild.description = &quot;Versão ${env.CURRENT_VERSION}&quot;
        }
    } catch (ignored) {
        currentBuild.result = &apos;FAILURE&apos;
    } finally {
        sendNotificationsToSlack(slackChannel, currentBuild.currentResult)
    }
}

def updateVersionWithMaven(String version) {
    
    withMaven(
                    mavenSettingsConfig: &apos;3fa78956-16be-4f78-8c04-b8b7410811c4&apos;,
                    mavenLocalRepo: &apos;.repository&apos;,
                    options: [
                            artifactsPublisher(disabled: true),
                            findbugsPublisher(disabled: true),
                            openTasksPublisher(disabled: true)
                    ]
            ) {
                
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f api-client/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f business/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f boot/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f client/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f connector-rest/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f domain/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f model/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f persistence/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f commons/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f service/pom.xml&quot;
                sh &quot;mvn versions:set -DnewVersion=${version} versions:commit -q -f webapp/pom.xml&quot;
            }
}

def updateClientVersion() {
    def versionFilePath = &apos;client/src/main/resources/version.properties&apos;
    
    println &quot;Alterando propriedade version do arquivo ${versionFilePath}&quot;

    def version = CURRENT_VERSION;
    def versionFormatted = version.substring(0, version.indexOf(&apos;-c6&apos;))
    def versionForProperties = versionFormatted + &apos;.00&apos;

    sh &quot;sed -i &apos;s:^[ \\t]*version[ \\t]*=\\([ \t]*.*\\)[/]*\$:version=&apos;${versionForProperties}&apos;:&apos; ${versionFilePath}&quot;
}

def sendNotifications(String slackChannel = &apos;&apos;, String state = &apos;STARTED&apos;, String extraMessage = &apos;&apos;) {

    if (state != &apos;STARTED&apos;) {
        currentBuild.result = state
    }

    notifyBitbucket ignoreUnverifiedSSLPeer: true
    sendNotificationsToSlack(slackChannel, state, extraMessage)
}

def sendNotificationsToSlack(String slackChannel = &apos;&apos;, String state = &apos;STARTED&apos;, String extraMessage = &apos;&apos;) {

    def COLOR_MAP = [
        &apos;STARTED&apos;: &apos;#7CAECE&apos;,
        &apos;ABORTED&apos;: &apos;#B8B8B8&apos;,
        &apos;UNSTABLE&apos;: &apos;warning&apos;,
        &apos;SUCCESS&apos;: &apos;good&apos;,
        &apos;FAILURE&apos;: &apos;danger&apos;
    ]

    def STATUS_MAP = [
        &apos;STARTED&apos;: &apos;Iniciada :thought_balloon:&apos;,
        &apos;ABORTED&apos;: &apos;Interrompida :worried:&apos;,
        &apos;UNSTABLE&apos;: &apos;Instável :flushed:&apos;,
        &apos;SUCCESS&apos;: &apos;Finalizada com Sucesso :sunglasses:&apos;,
        &apos;FAILURE&apos;: &apos;Finalizada com Erro :sob:&apos;
    ]

    def SHOW_CHANGELOG_MAP = [
        &apos;STARTED&apos;: true,
        &apos;ABORTED&apos;: false,
        &apos;UNSTABLE&apos;: false,
        &apos;SUCCESS&apos;: false,
        &apos;FAILURE&apos;: false
    ]

    def SEND_NOTIFY_CHANNEL_MAP = [
        &apos;STARTED&apos;: false,
        &apos;ABORTED&apos;: true,
        &apos;UNSTABLE&apos;: true,
        &apos;SUCCESS&apos;: false,
        &apos;FAILURE&apos;: true
    ]

    def color = COLOR_MAP[state]
    def statusMessage = STATUS_MAP[state]

    if (extraMessage.trim() != &apos;&apos;) {
        extraMessage = &quot;: (${extraMessage})&quot;
    }

    def message = &quot;&quot;&quot;*emprestimo* (${env.MAIN_BRANCH})${extraMessage} - *Deploy para DEV &lt;${env.BUILD_URL}|${env.BUILD_DISPLAY_NAME}&gt;* ${statusMessage}&quot;&quot;&quot;

    author = null

    if (SEND_NOTIFY_CHANNEL_MAP[state]) {
        slackSend color: color, message: message, channel: slackChannel
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>